<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=ks_c_5601-1987">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"¸¼Àº °íµñ";
	panose-1:2 11 5 3 2 0 0 2 0 4;}
@font-face
	{font-family:"\@¸¼Àº °íµñ";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:107%;
	text-autospace:none;
	word-break:break-hangul;
	font-size:10.0pt;
	font-family:"¸¼Àº °íµñ";}
h1
	{mso-style-link:"Á¦¸ñ 1 Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:115%;
	page-break-after:avoid;
	text-autospace:none;
	word-break:break-hangul;
	font-size:14.0pt;
	font-family:"Times New Roman",serif;
	font-weight:normal;}
h2
	{mso-style-link:"Á¦¸ñ 2 Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:115%;
	page-break-after:avoid;
	text-autospace:none;
	word-break:break-hangul;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;
	font-weight:normal;}
h3
	{mso-style-link:"Á¦¸ñ 3 Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:15.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-100.0pt;
	line-height:115%;
	page-break-after:avoid;
	text-autospace:none;
	word-break:break-hangul;
	font-size:10.0pt;
	font-family:"Times New Roman",serif;
	font-weight:normal;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"¸Ó¸®±Û Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:107%;
	layout-grid-mode:char;
	text-autospace:none;
	word-break:break-hangul;
	font-size:10.0pt;
	font-family:"¸¼Àº °íµñ";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"¹Ù´Ú±Û Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:107%;
	layout-grid-mode:char;
	text-autospace:none;
	word-break:break-hangul;
	font-size:10.0pt;
	font-family:"¸¼Àº °íµñ";}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:115%;
	text-autospace:none;
	word-break:break-hangul;
	font-size:10.0pt;
	font-family:"Times New Roman",serif;
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:#0563C1;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:#954F72;
	text-decoration:underline;}
span.1Char
	{mso-style-name:"Á¦¸ñ 1 Char";
	mso-style-link:"Á¦¸ñ 1";
	font-family:"Times New Roman",serif;}
span.2Char
	{mso-style-name:"Á¦¸ñ 2 Char";
	mso-style-link:"Á¦¸ñ 2";
	font-family:"Times New Roman",serif;}
span.3Char
	{mso-style-name:"Á¦¸ñ 3 Char";
	mso-style-link:"Á¦¸ñ 3";
	font-family:"Times New Roman",serif;}
span.Char
	{mso-style-name:"¸Ó¸®±Û Char";
	mso-style-link:¸Ó¸®±Û;}
span.Char0
	{mso-style-name:"¹Ù´Ú±Û Char";
	mso-style-link:¹Ù´Ú±Û;}
.MsoChpDefault
	{font-family:"¸¼Àº °íµñ";}
.MsoPapDefault
	{margin-bottom:8.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:107%;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:3.0cm 72.0pt 72.0pt 72.0pt;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=KO link="#0563C1" vlink="#954F72">

<div class=WordSection1>

<h1><b><span lang=EN-US style='font-size:17.0pt;line-height:115%'>Computational
Photography Assignment #3: Implement Poisson Blending by Junekyo Jhung</span></b></h1>

<h1><b><span lang=EN-US>Toy Problem</span></b></h1>

<h2><span class=2Char><span lang=EN-US>MATLAB</span></span></h2>

<h2><span lang=EN-US><img width=601 height=664
src="hw3_final_Jhung.files/image001.png"
alt="%% Toy Reconstruction&#13;&#10;function [im_out] = toy_reconstruct(im_in)&#13;&#10;% Initial Conditions&#13;&#10;[height, width] = size(im_in);&#13;&#10;M = 2 * height * width + 1;                  % M equations (rows)&#13;&#10; &#13;&#10;im2var = zeros(height, width);&#13;&#10;im2var(1:height * width) = 1:height * width; &#13;&#10; &#13;&#10;A = sparse([], [], [], M, height * width);   % Sparse matrix&#13;&#10;b = zeros(M, 1);                             % Known vector&#13;&#10; &#13;&#10;% Minimize the difference between the x-gradients of v and s&#13;&#10;e = 1;                                       % Equation counter&#13;&#10;for y = 1:height&#13;&#10;    for x = 1:width - 1&#13;&#10;        A(e, im2var(y, x + 1)) = 1;&#13;&#10;        A(e, im2var(y, x)) = -1;&#13;&#10;        b(e) = im_in(y, x + 1) - im_in(y, x);  &#13;&#10;        e = e + 1;&#13;&#10;    end  &#13;&#10;end&#13;&#10; &#13;&#10;% Minimize the difference between the y-gradients of v and s&#13;&#10;for y = 1:height - 1&#13;&#10;    for x = 1:width&#13;&#10;        A(e, im2var(y + 1, x)) = 1;&#13;&#10;        A(e, im2var(y, x)) = -1;&#13;&#10;        b(e) = im_in(y + 1, x) - im_in(y, x);  &#13;&#10;        e = e + 1;&#13;&#10;    end  &#13;&#10;end&#13;&#10; &#13;&#10;% Minimize the difference between the colors of the top left corners&#13;&#10;A(e, im2var(1,1)) = 1;&#13;&#10;b(e) = im_in(1,1);&#13;&#10; &#13;&#10;% Combine above objectives&#13;&#10;v = A\b;&#13;&#10; &#13;&#10;% Write reconstructed image&#13;&#10;im_out = reshape(v, [height, width]);&#13;&#10;imwrite(im_out, 'samples/toy_problem_result.png');&#13;&#10;imshow(im_out);&#13;&#10; &#13;&#10;end&#13;&#10;"></span></h2>

<h2><span lang=EN-US>Results</span></h2>

<p class=MsoNormal align=left style='text-align:left;page-break-after:avoid'><span
lang=EN-US><img width=216 height=234 id="±×¸² 1"
src="hw3_final_Jhung.files/image002.jpg"><img width=216 height=234 id="±×¸² 2"
src="hw3_final_Jhung.files/image003.jpg"></span></p>

<p class=MsoCaption align=left style='text-align:left;text-indent:40.0pt'><span
lang=EN-US>Figure </span><span lang=EN-US>1</span><span lang=EN-US>. Original(left)
and Reconstructed(right) Images</span></p>

<h2><span lang=EN-US>Description</span></h2>

<p class=MsoNormal style='margin-left:18.0pt'><span lang=EN-US
style='font-size:11.0pt;line-height:107%;font-family:"Times New Roman",serif'>By
computing v in given equation, <i>(Av-b)<sup>2</sup></i>, the original image
was able to be reconstructed as shown in Figure 1.</span></p>

<p class=MsoNormal style='margin-left:18.0pt'><span lang=EN-US
style='font-size:11.0pt;line-height:107%;font-family:"Times New Roman",serif'>Horizontal
and vertical gradients, and pixel values are used for the reconstruction. Both
seem similar with error of 1.9216e-06.</span></p>

<h1><b><span lang=EN-US>Poisson Blending</span></b></h1>

<h2><span lang=EN-US>MATLAB</span></h2>

<p class=MsoNormal><span lang=EN-US><img width=601 height=917
src="hw3_final_Jhung.files/image004.png"
alt="%% Poisson Blend&#13;&#10;function [im_blend] = poissonBlend(im_s, mask_s, im_background)&#13;&#10;[im_h, im_w] = size(im_s);&#13;&#10;num_var = sum(sum(mask_s));             % number of variables&#13;&#10;[pixel_y, pixel_x] = find(mask_s &gt; 0);  % find mask pixel by user&#13;&#10;im2var = zeros(im_h, im_w);&#13;&#10;A = sparse([], [], []);&#13;&#10;b = zeros(num_var, 3);                  % for rgb channels&#13;&#10;&#13;&#10;...&#13;&#10;e = 1;&#13;&#10;for i = 1:num_var&#13;&#10;    y = pixel_y(i);&#13;&#10;    x = pixel_x(i);&#13;&#10;    &#13;&#10;    A(e, im2var(y, x)) = 4;&#13;&#10;    &#13;&#10;    if mask_s(y, x)                     % polygon selected&#13;&#10;        if mask_s(y - 1, x)&#13;&#10;            A(e, im2var(y - 1, x)) = -1;&#13;&#10;            b(e, 1) = b(e, 1) - (im_s(y - 1, x, 1) - im_s(y, x, 1));&#13;&#10;            b(e, 2) = b(e, 2) - (im_s(y - 1, x, 2) - im_s(y, x, 2));&#13;&#10;            b(e, 3) = b(e, 3) - (im_s(y - 1, x, 3) - im_s(y, x, 3));&#13;&#10;        else&#13;&#10;            b(e, 1) = b(e, 1) + im_background(y - 1, x, 1);&#13;&#10;            b(e, 2) = b(e, 2) + im_background(y - 1, x, 2);&#13;&#10;            b(e, 3) = b(e, 3) + im_background(y - 1, x, 3);&#13;&#10;        end&#13;&#10; &#13;&#10;        if mask_s(y, x - 1)&#13;&#10;            A(e, im2var(y, x - 1)) = -1;&#13;&#10;            b(e, 1) = b(e, 1) - (im_s(y, x - 1, 1) - im_s(y, x, 1));&#13;&#10;            b(e, 2) = b(e, 2) - (im_s(y, x - 1, 2) - im_s(y, x, 2));&#13;&#10;            b(e, 3) = b(e, 3) - (im_s(y, x - 1, 3) - im_s(y, x, 3));&#13;&#10;        else&#13;&#10;            b(e, 1) = b(e, 1) + im_background(y, x - 1, 1);&#13;&#10;            b(e, 2) = b(e, 2) + im_background(y, x - 1, 2);&#13;&#10;            b(e, 3) = b(e, 3) + im_background(y, x - 1, 3);&#13;&#10;        end&#13;&#10;        ...&#13;&#10;    else                   % non-polygon selected(background only)&#13;&#10;      b(e, 1) = im_background(y, x, 1);&#13;&#10;      b(e, 2) = im_background(y, x, 2);&#13;&#10;      b(e, 3) = im_background(y, x, 3);&#13;&#10;    end&#13;&#10;    e = e + 1;&#13;&#10;end&#13;&#10; &#13;&#10;v_r = A\b(:, 1);&#13;&#10;v_g = A\b(:, 2);&#13;&#10;v_b = A\b(:, 3);&#13;&#10; &#13;&#10;im_blend = im_background;&#13;&#10;&#13;&#10;for i = 1:num_var&#13;&#10;    y = pixel_y(i);&#13;&#10;    x = pixel_x(i);&#13;&#10;    &#13;&#10;    im_blend(y, x, 1) = v_r(e);&#13;&#10;    im_blend(y, x, 2) = v_g(e);&#13;&#10;    im_blend(y, x, 3) = v_b(e);&#13;&#10;...&#13;&#10;end&#13;&#10;"></span></p>

<h2><span lang=EN-US>Results</span></h2>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US><img
width=540 height=406 id="±×¸² 5" src="hw3_final_Jhung.files/image005.jpg"><img
width=519 height=377 id="±×¸² 4" src="hw3_final_Jhung.files/image006.jpg"></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US><img
width=519 height=377 id="±×¸² 10" src="hw3_final_Jhung.files/image007.jpg"><img
width=519 height=377 id="±×¸² 13" src="hw3_final_Jhung.files/image008.jpg"></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US><img
width=515 height=290 id="±×¸² 16" src="hw3_final_Jhung.files/image009.jpg"><img
width=509 height=344 id="±×¸² 18" src="hw3_final_Jhung.files/image010.jpg"></span></p>

<p class=MsoCaption align=left style='margin-left:280.0pt;text-align:left;
text-indent:40.0pt'><span lang=EN-US>Figure 2. Poisson Blending Results</span></p>

<h2><span lang=EN-US>Description</span></h2>

<h3 style='margin-left:15.0pt;text-indent:-15.0pt'><span lang=EN-US>Poisson
blending is a method to blend a selected region of an image on to another
image. To reconstruct a final image, gradient and pixel value terms should be
considered.</span></h3>

<p class=MsoNormal><span lang=EN-US>Poisson blending is a method to blend a
selected region of an image onto another image. To reconstruct a final image,
gradient and pixel value terms should be considered</span></p>

<p class=MsoNormal><span lang=EN-US>at the algorithm. By comparing both terms
between source image and target image with considering three different rgb
channels, Poisson blending could be done.</span></p>

<p class=MsoNormal><span lang=EN-US>However, my own results as shown in Figure
2, transparency appears which lowers the quality.</span></p>

<h1><b><span lang=EN-US>Mixed Blending</span></b></h1>

<h2><span lang=EN-US>MATLAB</span></h2>

<p class=MsoNormal><span lang=EN-US><img width=601 height=1180
src="hw3_final_Jhung.files/image011.png"
alt="%% Mixed Blend&#13;&#10;function [im_blend] = mixedBlend(im_s, mask_s, im_background )&#13;&#10;...&#13;&#10;for i=1:num_var&#13;&#10;    im2var(pixel_y(i), pixel_x(i)) = i;&#13;&#10;end &#13;&#10; &#13;&#10;im_s_temp = zeros(1, 3);&#13;&#10;im_background_temp = zeros(1, 3);&#13;&#10; &#13;&#10;e = 1;&#13;&#10;for i=1:num_var&#13;&#10;    y = pixel_y(i);&#13;&#10;    x = pixel_x(i);&#13;&#10;    &#13;&#10;    A(e,im2var(y, x)) = 4;              % center&#13;&#10;    &#13;&#10;    if mask_s(y, x)                     % polygon selected&#13;&#10;        if mask_s(y - 1, x)&#13;&#10;            A(e,im2var(y - 1, x)) = -1;&#13;&#10;            &#13;&#10;            im_s_temp(1, 1) = im_s(y, x, 1) - im_s(y - 1, x, 1);&#13;&#10;&#13;&#10;            im_background_temp(1, 1) = im_background(y, x, 1) ...&#13;&#10;                                        - im_background(y - 1, x, 1);&#13;&#10;&#13;&#10;            % use larger gradient&#13;&#10;            if abs(im_s_temp(1, :)) &lt; abs(im_background_temp(1, :))&#13;&#10;                b(e, :) = b(e, :) + im_background_temp(1, :);&#13;&#10;            else&#13;&#10;                b(e, :) = b(e, :) + im_s_temp(1, :);&#13;&#10;            end&#13;&#10;        else&#13;&#10;            b(e, 1) = b(e, 1) + im_background(y - 1, x, 1);&#13;&#10;end&#13;&#10;        &#13;&#10;        if mask_s(y, x - 1)&#13;&#10;            A(e, im2var(y, x - 1)) = -1;&#13;&#10;            &#13;&#10;            im_s_temp(1, 1) = im_s(y, x, 1) - im_s(y, x - 1, 1);&#13;&#10;                         &#13;&#10;            im_background_temp(1, 1) = im_background(y, x, 1) ...&#13;&#10;                                        - im_background(y, x - 1, 1);&#13;&#10;&#13;&#10;            if abs(im_s_temp(1, :)) &lt; abs(im_background_temp(1, :))&#13;&#10;                b(e, :) = b(e, :) + im_background_temp(1, :);&#13;&#10;            else&#13;&#10;                b(e, :) = b(e, :) + im_s_temp(1, :);&#13;&#10;            end&#13;&#10;        else&#13;&#10;            b(e, 1) = b(e, 1) + im_background(y, x - 1, 1);&#13;&#10;            b(e, 2) = b(e, 2) + im_background(y, x - 1, 2);&#13;&#10;            b(e, 3) = b(e, 3) + im_background(y, x - 1, 3);&#13;&#10;        end&#13;&#10;...&#13;&#10;&#13;&#10;    else                   % non-polygon selected(background only)&#13;&#10;        b(e, 1) = im_background(y, x, 1);&#13;&#10;        b(e, 2) = im_background(y, x, 2);&#13;&#10;        b(e, 3) = im_background(y, x, 3); &#13;&#10;    end&#13;&#10;    e = e + 1;&#13;&#10;end&#13;&#10; &#13;&#10;v_r = A\b(:, 1);&#13;&#10;v_g = A\b(:, 2);&#13;&#10;v_b = A\b(:, 3);&#13;&#10; &#13;&#10;im_blend = im_background;&#13;&#10;e = 1;&#13;&#10;for i=1:num_var&#13;&#10;    y = pixel_y(i);&#13;&#10;    x = pixel_x(i);&#13;&#10;    &#13;&#10;    im_blend(y,x,1) = v_r(e);&#13;&#10;    im_blend(y,x,2) = v_g(e);&#13;&#10;    im_blend(y,x,3) = v_b(e);&#13;&#10;    &#13;&#10;    e = e + 1;&#13;&#10;end&#13;&#10;&#13;&#10;"></span></p>

<h2><span lang=EN-US>Results</span></h2>

<p class=MsoNormal><span lang=EN-US><img width=539 height=404 id="±×¸² 19"
src="hw3_final_Jhung.files/image012.jpg"></span><span lang=EN-US
style='font-size:0pt;line-height:107%;font-family:"Times New Roman",serif;
color:black;background:black;layout-grid-mode:line'>&nbsp;</span><span
lang=EN-US><img width=519 height=377 id="±×¸² 20"
src="hw3_final_Jhung.files/image013.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US><img width=517 height=377 id="±×¸² 21"
src="hw3_final_Jhung.files/image014.jpg"></span><span lang=EN-US
style='font-size:0pt;line-height:107%;font-family:"Times New Roman",serif;
color:black;background:black;layout-grid-mode:line'>&nbsp;</span><span
lang=EN-US><img width=519 height=377 id="±×¸² 22"
src="hw3_final_Jhung.files/image015.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US><img width=509 height=289 id="±×¸² 23"
src="hw3_final_Jhung.files/image016.jpg"></span><span lang=EN-US
style='font-size:0pt;line-height:107%;font-family:"Times New Roman",serif;
color:black;background:black;layout-grid-mode:line'>&nbsp;</span><span
lang=EN-US><img width=556 height=373 id="±×¸² 24"
src="hw3_final_Jhung.files/image017.jpg"></span></p>

<p class=MsoCaption align=left style='margin-left:280.0pt;text-align:left;
text-indent:40.0pt'><span lang=EN-US>Figure 3. Mixed Blend Results</span></p>

<h2><span lang=EN-US>Description</span></h2>

<p class=MsoNormal style='text-indent:40.0pt'><span lang=EN-US>Differ to the
Poisson blend, Mixed blend blends source image¡¯s color into target image as
shown in Figure 3. Also, Mixed blend results seem the source image has</span></p>

<p class=MsoNormal style='text-indent:40.0pt'><span lang=EN-US>blended with
some transparency. This is done by using mixed gradient technique and comparing
the gradient and the pixel value in Poisson equation. </span></p>

</div>

</body>

</html>
